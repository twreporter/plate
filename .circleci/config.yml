# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  slack: circleci/slack@4.1.1

steps:
  gcloud-login: &gcloud-login
    run:
      name: Login google cloud platform
      command: |
        # GOOGLE_AUTH is defined in Organization Context of circleci project
        # GOOGLE_AUTH is used to grant CircleCI vm to have the permission to access GCP
        echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
        gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
  setup-env: &setup-env
    run:
      name: Setup environment variables
      command: |
        APP="keystone-plate"
        CLUSTER_NAME=${K8S_PRIVATE_CLUSTER_NAME}
        CLUSTER_NAMESPACE="default"
        ENVIRONMENT=""
        PKG_VER="latest"
        if [ "${CIRCLE_BRANCH}" == "staging" ]; then
          # pkg version for staging
          PKG_VER="$CIRCLE_BRANCH-$(cat .pkg-version)-$(echo $CIRCLE_SHA1 | cut -c -7)"
          ENVIRONMENT="staging"
          DEPLOYMENT="staging-keystone-plate"
        fi
        if [ "${CIRCLE_BRANCH}" == "release" ]; then
          # pkg version for release
          PKG_VER="$CIRCLE_BRANCH-$(cat .pkg-version)"
          ENVIRONMENT="release"
          DEPLOYMENT="keystone-plate"
        fi
        echo "export PKG_VER=${PKG_VER}" >> $BASH_ENV
        echo "export DEPLOYMENT=${DEPLOYMENT}" >> $BASH_ENV
        echo "export APP=${APP}" >> $BASH_ENV
        echo "export CLUSTER_NAME=${CLUSTER_NAME}" >> $BASH_ENV
        echo "export CLUSTER_NAMESPACE=${CLUSTER_NAMESPACE}" >> $BASH_ENV
        echo "export ENVIRONMENT=${ENVIRONMENT}" >> $BASH_ENV
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $BASH_ENV

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.15
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache the dependencies for building
      - restore_cache:
          keys:
          - v1-dependencies-build-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-build-{{ checksum "yarn.lock" }}
      - run:
          name: Build Keystone Plugin Bundles
          command: |
            CLIENT_SOCKETIO_HOST=keystone-plugin.twreporter.org
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              CLIENT_SOCKETIO_HOST=staging-keystone-plugin.twreporter.org
            fi
            CLIENT_SOCKETIO_HOST=$CLIENT_SOCKETIO_HOST CLIENT_SOCKETIO_PROTOCOL=https CLIENT_SOCKETIO_PORT=443 make build-keystone-plugin

      - run: rm -rf node_modules

      # Download and cache the dependencies for running
      - restore_cache:
          keys:
            - v1-dependencies-runtime-{{ checksum "yarn.lock" }}
      - run: yarn install --production
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-runtime-{{ checksum "yarn.lock" }}

      - run:
          name: Save pkg version to a file
          command: node -pe "require('./package.json').version" > .pkg-version

      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./*
  push:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: .
      - *setup-env
      - *gcloud-login
      - run:
          name: Build and push Docker image
          command: | 
            echo "PKG_VER: ${PKG_VER}"

            # gcs key file
            echo ${GCS_KEY_FILE} | base64 -i --decode > gcskeyfile.json

            docker build -t gcr.io/${GOOGLE_PROJECT_ID}/${APP}:$PKG_VER .
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${APP}:$PKG_VER
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: .
      - *setup-env
      - *gcloud-login
      - run:
          name: Connect to container cluster 
          command: |
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet container clusters get-credentials $CLUSTER_NAME --zone=asia-east1-a
      - run:
          name: Fetch Kubernetes config source
          command: |
            gcloud source repos clone ${K8S_CONFIG_REPO} 
      - run:
          name: Install kustomize binary
          command: |
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
            mv ./kustomize /usr/local/bin/
      - run:
          name: Prepare for kubernetes config build
          command: |
            # K8S_CONFIG_REPO is defined in the organization context twreporter.
            cd "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}"
            kustomize edit set image "gcr.io/${GOOGLE_PROJECT_ID}/${APP}:${PKG_VER}"
      - run:
          name: Deploy to Google Kubernetes Engine
          command: |
            kustomize build "${K8S_CONFIG_REPO}/${APP}/overlays/${ENVIRONMENT}" | kubectl apply -f -
            kubectl rollout status deployment ${DEPLOYMENT} -n $CLUSTER_NAMESPACE 

workflows:
  version: 2
  build_and_push:
    jobs:
      - build
      - push:
          context: twreporter-gcp
          requires:
            - build
          filters:
            branches:
              only:
                - staging
                - release
      - slack/on-hold: 
          context: twreporter
          requires:
            - push
      - wait_for_approval:
          requires:
            - slack/on-hold
          type: approval
      - deploy:
          context: twreporter-gcp
          requires:
            - wait_for_approval
